---
Description: GraphQL Api for Gator
Resources:
  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: GraphQL API
      AuthenticationType: AWS_IAM

  DBDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DBTable
      Description: Data source to get data from
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !Ref LambdaReadAllDataRole
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref dataTable

  QueryGetPostResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getPost
      DataSourceName: !GetAtt DBDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "GetItem",
            "key" : {
                "id" : $util.dynamodb.toDynamoDBJson($ctx.args.id)
            }
        }
      ResponseMappingTemplate: "$utils.toJson($ctx.result)"

  QueryAllPostResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: allPost
      DataSourceName: !GetAtt DBDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            #if( $ctx.args.count )
                "limit": $ctx.args.count,
            #end
            #if( ${ctx.args.nextToken} )
                "nextToken": "${ctx.args.nextToken}"
            #end
        }
      ResponseMappingTemplate: |
        {
            "posts": $utils.toJson($ctx.result.items),
            #if( ${ctx.result.nextToken} )
                "nextToken": "${ctx.result.nextToken}",
            #end
        }

  Schema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type Comment {
            author: String!
            comment: String!
        }
        type Mutation {
            addComment(id: ID!, author: String!, comment: String!): Post
            addTag(id: ID!, tag: String!): Post
            removeTag(id: ID!, tag: String!): Post
            deletePost(id: ID!, expectedVersion: Int): Post
            upvotePost(id: ID!): Post
            downvotePost(id: ID!): Post
            updatePost(
                id: ID!,
                author: String,
                title: String,
                content: String,
                url: String,
                expectedVersion: Int!
            ): Post
            addPost(
                author: String!,
                title: String!,
                content: String!,
                url: String!
            ): Post!
        }
        type PaginatedPosts {
            posts: [Post!]!
            nextToken: String
        }
        type Post {
            id: ID!
            author: String
            title: String
            content: String
            url: String
            ups: Int!
            downs: Int!
            version: Int!
            tags: [String!]
            comments: [Comment!]
            created: String
            lastUpdated: String
        }
        type Query {
            allPostsByTag(tag: String!, count: Int, nextToken: String): PaginatedPosts!
            allPostsByAuthor(author: String!, count: Int, nextToken: String): PaginatedPosts!
            allPost(count: Int, nextToken: String): PaginatedPosts!
            getPost(id: ID!): Post
        }
        schema {
            query: Query
            mutation: Mutation
        }

Outputs:
  GraphQLApiARN:
    Description: The App ID of the GraphQL endpoint.
    Value: !Ref GraphQLApi
  GraphQLApiId:
    Description: The App ID of the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.ApiId
  GraphQLApiEndpoint:
    Description: The URL for the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.GraphQLUrl
  DBDataSourceARN:
    Description: The ARN for the Post DynamoDB table DataSource.
    Value: !Ref DBDataSource
  DBDataSourceName:
    Description: The ARN for the Post DynamoDB table DataSource.
    Value: !GetAtt DBDataSource.Name
