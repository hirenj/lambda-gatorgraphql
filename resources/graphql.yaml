AWSTemplateFormatVersion: '2010-09-09'
Parameters: {}
Description: GraphQL Api for Gator
Resources:
  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: GraphQL API
      AuthenticationType: AWS_IAM

  DBDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DBTable
      Description: Data source to get data from
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt 'LambdaReadAllDataRole.Arn'
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref data

  Gunzipper:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const zlib = require('zlib');
          exports.handler = async (event) => {
              return new Promise( (resolve,reject) => {
                  zlib.inflate(new Buffer(event.data,'binary'), (err,result) => {
                      if (err) {
                          return reject(err);
                      }
                      return resolve(result.toString('utf8'));
                  });
              }).then( inflated => {
                  return {
                      statusCode: 200,
                      body: JSON.parse(inflated),
                  }
              });
          };
      Description: Gunzipper
      Handler: index.handler
      Role: !GetAtt 'LambdaGunzipperRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 10
  LambdaGunzipperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  AppSyncGunzipperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt Gunzipper.Arn
  GunzipperDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: 'Gunzipper'
      Description: 'Gunzipper for data'
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncGunzipperRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt Gunzipper.Arn
  DatasetAuthoriser:
    Type: "AWS::AppSync::FunctionConfiguration"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: DatasetAuthoriser
      Description: Authoriser for datasets
      DataSourceName: !GetAtt DBDataSource.Name
      FunctionVersion: '2018-05-29'
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression": "dataset = :dataset and acc = :acc",
            "expressionValues" : {
              ":dataset" : $util.dynamodb.toDynamoDBJson($ctx.stash.dataset),
              ":acc" : $util.dynamodb.toDynamoDBJson("metadata")
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($grants = $ctx.stash.grants )
        #set ($dataset = $ctx.stash.dataset )
        #set ($groupids = $ctx.result.items[0]["group_ids"])
        #set ($anymatch = 0)
        #set ($testedkeys = [])
        #set ($testedpatterns = [])
        $util.qr($testedkeys.add('START'))
        $util.qr($testedpaterns.add('START'))
        #foreach ($grant in $grants.entrySet())
          $util.qr($testedkeys.add($grant.key))
          #foreach ($groupid in $groupids)
              $util.qr($testedpatterns.add("${groupid}/${dataset}"))
              $util.qr($testedpatterns.add("${groupid}/*"))
              #if ($grant.key == "${groupid}/${dataset}" || $grant.key == "${groupid}/*" )
                #set( $anymatch = 1)
              #end
          #end
        #end
        #if ($anymatch == 0)
          ## Bail out if no matches for dataset
          $util.unauthorized()
        #end
        $util.qr($ctx.stash.put("mime", $ctx.result.items[0].metadata.mimetype))
        $util.qr($ctx.stash.put("locations", $ctx.result.items[0].metadata.locations))
        $util.qr($ctx.stash.put("groupids", $groupids))
        $util.qr($ctx.stash.put("testedkeys", $testedkeys))
        $util.qr($ctx.stash.put("testedpatterns", $testedpatterns))
        {}
  DataResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: DataItem
      FieldName: data
      DataSourceName: !GetAtt GunzipperDataSource.Name
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("mime", $ctx.source.mimetype))
        $util.qr($ctx.stash.put("locations", $ctx.source.locations))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context.source)
        }
      ResponseMappingTemplate: |
        #if( $ctx.stash.mime == 'application/json+slim_expression')
          #set($newresults = [])
          #set($size = $context.result.body.size())
          #set( $locationcount = $size / 2 )
          #set( $locationcount = $locationcount - 1 )
          #foreach($index in [0..$locationcount])
            #set($map = {})
              $util.qr( $map.put("__typename","SlimExpression"))
              #set( $locindex = 2 * $index )
              #set( $valindex = $locindex + 1 )
              $util.qr( $map.put("location", $ctx.stash.locations.get($ctx.result.body.get($locindex)).description ))
              $util.qr( $map.put("tissue", $ctx.stash.locations.get($ctx.result.body.get($locindex)).simple_tissue ))
              $util.qr( $map.put("value", $ctx.result.body.get($valindex)))
              #if ( $ctx.arguments.filter.location )
                #if ( $map.location.toLowerCase().contains($ctx.arguments.filter.location.toLowerCase()) )
                  $util.qr($newresults.add($map))
                #end
              #else
                $util.qr($newresults.add($map))
              #end
          #end
          $util.qr($ctx.result.put("body",$newresults))
        #else
          #foreach ($result in $context.result.body)
            #if( $ctx.stash.mime == 'application/json+glycodomain')
              #set( $ignore = $result.put("__typename", "Domains"))
            #elseif( $ctx.stash.mime == 'application/json+msdata')
              #set( $ignore = $result.put("__typename", "MsData"))
            #end
          #end
        #end
        $util.toJson($context.result.body)
  QueryAllPostResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getAccs
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt DatasetAuthoriser.FunctionId
          - !GetAtt MultipleAccRetriever.FunctionId
      RequestMappingTemplate: |
        #set( $PUBLIC_GRANT = "[{""public/*"":[""*""],""proteins"":[]}]")
        $util.qr($ctx.stash.put("accs", $ctx.args.accs))
        $util.qr($ctx.stash.put("dataset", $ctx.args.dataset))
        #if( $!ctx.request.headers.grants != "" )
          $util.qr($ctx.stash.put("grants", $util.parseJson($ctx.request.headers.grants)))
        #else
          $util.qr($ctx.stash.put("grants", $util.parseJson($PUBLIC_GRANT)))
        #end
        {}
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  MetadataRetriever:
    Type: "AWS::AppSync::Resolver"
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getTissuesCellMetadata
      DataSourceName: !GetAtt DBDataSource.Name
      RequestMappingTemplate: |
        #set( $PUBLIC_GRANT = "{""public/*"":[""*""],""proteins"":[]}")
        #if( $!{$ctx.request.headers.grants} )
          $util.qr($ctx.stash.put("grants", $util.parseJson($ctx.request.headers.grants)))
        #else
          $util.qr($ctx.stash.put("grants", $util.parseJson($PUBLIC_GRANT)))
        #end
        {
            "version" : "2017-02-28",
          "operation" : "Query",
            "query" : {
                ## Provide a query expression. **
                "expression": "acc = :acc",
                "expressionValues" : {
                    ":acc" : $util.dynamodb.toDynamoDBJson("metadata")
                }
            }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        #set( $all_locations_set = { } )
        $util.qr( $all_locations_set.put( "a", {} ))

        #set ($grants = $ctx.stash.grants )


        #set ($testedkeys = [])
        #set ($testedpatterns = [])
        #set ($allkeys = [])

        #foreach ($item in $ctx.result.items)

          #set ($dataset = $item.dataset )
          #if ($item.get("group_ids"))
            #set ($groupids = $item.get("group_ids"))
          #else
            #set ($groupids = [])
          #end
          $util.qr($ctx.stash.put("lastitem_dataset",$dataset ))
          #set ($anymatch = 0)
          $util.qr($testedkeys.add('START'))
          $util.qr($testedpaterns.add('START'))
          #foreach ($grant in $grants.entrySet())
            $util.qr($testedkeys.add($grant.key))
            #foreach ($groupid in $groupids)
                $util.qr($testedpatterns.add("${groupid}/${dataset}"))
                $util.qr($testedpatterns.add("${groupid}/*"))
                #if ($grant.key == "${groupid}/${dataset}" || $grant.key == "${groupid}/*" )
                  #set( $anymatch = 1)
                #end
            #end
          #end

          #if ($anymatch == 1)
            #if ( $item.metadata.locations )
            #foreach ($loc in $item.metadata.locations)
              #set( $map = {} )
                    #set( $current_locs = {} )
              $util.qr( $map.put("location", $loc.description ))
              $util.qr( $map.put("tissue", $loc.get("simple_tissue") ))
              #set( $mapkey = "${map.location}/${map.tissue}" )
              #set( $alphabetic_key = $mapkey.replaceAll("[^A-Za-z0-9]", "").substring(0,1).toLowerCase() )
                    #if ( $all_locations_set.get($alphabetic_key) )
                #set( $current_locs = $all_locations_set.get($alphabetic_key) )
                    #else
                #set( $current_locs = {} )
              #end
              #if ( $current_locs.containsKey($mapkey) )
                      #set( $existing_val = $current_locs.get($mapkey) )
                $util.qr($current_locs.get($mapkey).datasets.add($dataset))
              #else
                $util.qr( $map.put("datasets", [] ) )
                $util.qr( $map.datasets.add($dataset) )
                $util.qr( $current_locs.put( $mapkey, $map ) )
              #end
                    #if ( ! $current_locs.isEmpty() )
                $util.qr($all_locations_set.put($alphabetic_key, $current_locs))
                    #end
            #end
            #end
          #end
        #end

        #set( $resultset = [] )
        #foreach( $locset in $all_locations_set.entrySet() )
               #set( $results = [] )
               #foreach ($loc in $locset.value.entrySet())
                 $util.qr($loc.value.put("__typename","TissueCellMetadata"))
                 $util.qr($results.add($loc.value))
               #end
               $util.qr($resultset.add($results))
        #end
        $util.toJson($resultset)
  MultipleAccRetriever:
    Type: "AWS::AppSync::FunctionConfiguration"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: QueryAllPostResolver
      Description: Get multiple accs for dataset
      DataSourceName: !GetAtt DBDataSource.Name
      FunctionVersion: '2018-05-29'
      RequestMappingTemplate: |
        #set($ids = [])
        #set($unprocessed = [])
        #set($total = 0)
        #foreach($id in ${ctx.args.accs})
          #set($map = {})
          #if ( $total < 50 )
            $util.qr($map.put("acc", $util.dynamodb.toString($id)))
            $util.qr($map.put("dataset", $util.dynamodb.toString($ctx.args.dataset)))
            $util.qr($ids.add($map))
            #set ( $total = $total + 1 )
          #else
            $util.qr($unprocessed.add($id))
          #end

        #end
        $util.qr($ctx.stash.put("unprocessed",$unprocessed))
        {
            "version" : "2018-05-29",
            "operation" : "BatchGetItem",
            "tables" : {
                "test-data": {
                    "keys": $util.toJson($ids),
                    "consistentRead": true
                }
            }
        }
      ResponseMappingTemplate: !Sub |
        #foreach ($result in $ctx.result.data["${data}"])
          ## Extract type name from the id field.
          $util.qr($result.put("mimetype",$ctx.stash.mime))
          $util.qr($result.put("locations",$ctx.stash.locations))
        #end
        #set( $unprocessed = $ctx.stash.unprocessed )
        #foreach ($skipped in $ctx.result.unprocessedKeys["${data}"])
          $util.qr( $unprocessed.add($skipped.acc))
        #end
        $util.toJson({ "items" : $ctx.result.data["${data}"], "dataset" : $ctx.args.dataset, "unprocessed" : $unprocessed })
  Schema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        union DataTypes = MsData | Domains | SlimExpression

        input DataFilter {
          location: String
        }

        input DataSetFilter {
          mimetype: String
        }

        type Domains {
          start: Int
          end: Int
          dom: String
        }

        type MsData {
          acc: String
          peptide_start: Int
          peptide_end: Int
          sites: [[String]]
          composition: [String]
        }

        type SlimExpression {
          location: String
          value: Float
          tissue: String
        }

        type Query {
          getAccs(accs: [String]!, dataset: String): DataItemSet
          getTissuesCellMetadata(filter: DataSetFilter): [[TissueCellMetadata]]
        }

        type DataItem {
          acc: String!
          dataset: String
          data(filter: DataFilter): [DataTypes]
        }

        type TissueCellMetadata {
          tissue: String
          location: String
          datasets: [String]
        }

        type DataItemSet {
          items: [DataItem]
          nextToken: String
          unprocessed: [String]
        }